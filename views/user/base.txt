<%- include('partials/header')%>

   
<%- include('partials/navbar')%>

<%- include('partials/footer')%>


   <% if(message.length  > 0){ %>
          <div class="form-group">
            <p  style="padding: 10px 10px; background-color: rgb(255, 175, 175); border: 1px solid rgb(83, 5, 5); color: rgb(87, 1, 1);"><%= message %></p>
          </div>
        <% } %>




 <div class="email-otp-container">
               <!-- Six input fields for OTP digits -->
               <input type="text" class="email-otp-input" pattern="\d" maxlength="1">
               <input type="text" class="email-otp-input" pattern="\d" maxlength="1" disabled>
               <input type="text" class="email-otp-input" pattern="\d" maxlength="1" disabled>
               <input type="text" class="email-otp-input" pattern="\d" maxlength="1" disabled>
           </div>






/**
 * Verify OTP
 * 
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {String} email - Email of the user
 */
const otpValidation = asyncHandler(async (req, res, email) => {
    try {
      const otpInput = req.body.otp;
      const user = await User.findOne({ email: email });
      if (!user) {
        console.log(`User with email ${email} notfound.`);
        return res.redirect('/login');
      }
      const storedOtp = req.session.otp;
      if (!storedOtp) {
        console.log('No OTP found in session.');
        return res.redirect('/login');
      }
      if (otpInput === storedOtp) {
        user.isVerified = true;
        await user.save();
        console.log(`OTP verification successful for ${email}.`);
        return res.render('user/login', {
          userData: user,
          email,
          message: 'OTP verification successful!',
        });
      } else {
        console.log(`Invalid OTP entered for ${email}.`);
        return res.render('user/verifyOtp', { message: 'Invalid OTP' });
      }
    } catch (error) {
      console.error('Error during OTP verification:', error.message);
      return res.redirect('/verifyOtp');
    }
  });




  https://cloud.mongodb.com/v2/6689087af75bac403db10945#/metrics/replicaSet/66890940b66e871871769beb/explorer/Elegant/users/find






  // const otpValidation =asyncHandler( async (req, res) => {
//     try {
//       const otpInput = req?.body?.otp;
//       const email = req?.body?.email;
//       console.log(otpInput,email);
  
//       if (!email) {
//         console.log('Email is not available in session.');
//         return res.redirect('/login');
//       }
  
//       const user = await User.findOne({ email : email });
  
//       if (!user) {
//         console.log(`User with email ${email} not found.`);
//         return res.redirect('/login');
//       }
   
//       // Assuming the OTP was stored in the session
//       const storedOtp = req.session.otp;
  
//       if (!storedOtp) {
//         console.log('No OTP found in session.');
//         return res.redirect('/login');
//       }
  
//       // Compare user input OTP with stored OTP
//       if (otpInput === storedOtp) {
//         // Update user's verification status
//         user.isVerified = true;
//         await user.save();
  
//         console.log(`OTP verification successful for ${email}.`);
//         return res.render('user/login', {
//           userData: user,
//           email,
//           message: 'OTP verification successful!',
//         });
//       } else {
//         console.log(`Invalid OTP entered for ${email}.`);
//         return res.render('user/verifyOtp', { message: 'Invalid OTP' });
//       }
//     } catch (error) {
//       console.error('Error during OTP verification:', error);
//       return res.redirect('/verifyOtp');
//     }
//   });
  





<!-- <% if (locals.userLoggedIn && locals.userLoggedIn.user_id) { %> -->
                    <li class="nav-item submenu dropdown">
                        <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                           aria-expanded="false"><span class="lnr lnr-user"></span></a>
                        <ul class="dropdown-menu">
                            <li class="nav-item"><a class="nav-link" href="/profile">Profile</a></li>
                            <li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
                        </ul>
                    </li>
                <!-- <% } else { %> -->
                    <li class="nav-item submenu dropdown">
                        <a href="#" class="nav-link dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
                           aria-expanded="false"><span class="lnr lnr-user"></span></a>
                        <ul class="dropdown-menu">
                            <li class="nav-item"><a class="nav-link" href="/login">Login</a></li>
                            <li class="nav-item"><a class="nav-link" href="/signup">Signup</a></li>
                        </ul>
                    </li>
                <!-- <% } %> -->
            </ul>








1)

 <br><br>
						<div style="display: flex; align-items: center;">
							<form id="applyCouponForm" style="margin-right: 10px;">
							  <input type="hidden" id="productId" value="<%= product._id %>">
							  <input type="text" id="couponCode" placeholder="Enter coupon code" required>
							  <button type="submit" class="btn">Apply Coupon</button>
							</form>
							<button class="btn" id="removeCouponBtn">Remove</button>
						  </div>
						  <br><br>


              2)
              <div class="containerC">
							<div class="coupon-card">
								<h3>Coupon</h3>
								<% if (!coupons || coupons.length === 0) { %>
									<p>No coupons available</p>
								<% } else { %>
									<% coupons.forEach(coupon => { %>
										<div class="coupon-row">
											<span id="cpnCode"><%= coupon.name %></span>
											<span id="cpnBtn">Copy</span>
										</div>
										
										<div class="circle1"></div>
										<div class="circle2"></div>
									<% }) %>
								<% } %>
							</div>
						</div>



            3) style

            .containerC {
    width: 100%;
    background: #f0fff3;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px; /* Add some padding around the container */
}

.coupon-card {
    background: linear-gradient(135deg, #7158fe, #9d4de6);
    color: #fff;
    text-align: center;
    padding: 15px 25px; /* Adjust padding */
    border-radius: 10px; /* Rounded corners */
    box-shadow: 0 5px 10px rgba(0,0,0,0.15); /* Shadow for depth */
    position: relative;
    max-width: 300px; /* Max width of the card */
    min-height: 150px; /* Minimum height of the card */
    width: auto; /* Adjust width based on content */
}

.coupon-card h3 {
    font-size: 20px; /* Font size for heading */
    font-weight: 400;
    line-height: 28px; /* Line height for spacing */
    margin-bottom: 10px; /* Space below the heading */
}

.coupon-card p {
    font-size: 12px; /* Font size for text */
    margin-top: 10px; /* Space above the text */
}

.coupon-row {
    display: flex;
    align-items: center;
    margin: 10px auto;
    width: auto; /* Adjust width to fit content */
}

#cpnCode {
    border: 1px dashed #fff;
    padding: 5px 10px; /* Padding inside the code */
    border-right: 0;
    font-size: 14px; /* Font size for code */
    white-space: nowrap; /* Prevent text wrapping */
}

#cpnBtn {
    border: 1px solid #fff;
    background: #fff;
    padding: 5px 10px; /* Padding inside the button */
    color: #7158fe;
    cursor: pointer;
    font-size: 14px; /* Font size for button */
}

.circle1, .circle2 {
    background: #f0fff3;
    width: 30px; /* Diameter of circles */
    height: 30px; /* Diameter of circles */
    border-radius: 50%;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

.circle1 {
    left: -15px; /* Adjust position for circle 1 */
}

.circle2 {
    right: -15px; /* Adjust position for circle 2 */
}